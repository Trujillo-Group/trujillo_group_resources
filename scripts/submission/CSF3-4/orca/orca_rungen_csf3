#!/usr/bin/python3


#############################################
######## Create Orca SGE runscript ##########
#############################################
# Author: Tim Renningholtz
# Date: 27.09.2024
# Description: This script creates a SGE runscript for Orca 5.0.4 or 6.1.0-avx2
# on the CSF3 cluster.

#### Imports ####

import os
import sys
import argparse
import re

#### Define functions ####



def custom_print(string: str, print_type: str = "default") -> str:
    normal = "\u001b[0m"

    if print_type == "info":
        prefix = "\u001b[38;5;33m ℹ️ℹ️"
        new_string = f"{prefix}{normal}\t{string}"
    elif print_type in ["warn", "warning"]:
        prefix = "\u001b[38;5;220m ⚠️ "
        new_string = f"{prefix}\t{string}{normal}"
        new_string = f"{prefix}\t{string}{normal}"
    elif print_type in ["done"]:
        prefix = "\u001b[38;5;46m ✅✅"
        new_string = f"{prefix}{normal}\t{string}"
    elif print_type in ["error"]:
        prefix = "\u001b[38;5;196m 🙀🙀"
        new_string = f"{prefix}{normal}\t{string}"
    elif print_type in ["attention", "att"]:
        prefix = "\u001b[38;5;208m 🚨🚨"
        new_string = f"{prefix}{normal}\t{string}"
    else:
        new_string = string
    return new_string


#### Create parser ####

def get_parser():
    """Function that creates a parser for the command line arguments."""

    parser = argparse.ArgumentParser(description="Create Orca slurm runscript")
    parser.add_argument(
        "-i", "--input", help="Input file name", required=False, type=str
    )
    parser.add_argument(
        "-c", "--cores", help="Number of cores", required=False, type=int
    )
    parser.add_argument(
        "-cpg",
        "--cores_per_group",
        help="Number of cores per group",
        required=False,
        type=int,
        default=1,
    )
    parser.add_argument(
        "-nbo",
        "--nbo",
        help="Request NBO module; needed only if nbo analysis is requested in input file",
        action="store_true",
    )
    parser.add_argument("-amd", "--amd", help="Run on AMD nodes", action="store_true")
    parser.add_argument(
        "-o5",
        "--orca5",
        help="Request Orca 5 module; default is Orca6",
        action="store_true",
    )
    parser.add_argument(
        "-inter",
        "--interactive",
        help="Run interactively; default is to submit job",
        action="store_true",
        default=False,
    )
    parser.add_argument(
        "-s",
        "--submit",
        help="Submit job after creating runscript",
        action="store_true",
        default=False,
    )
    args = parser.parse_args()
    if not any(vars(args).values()) or args.interactive:
        args = parse_interactively()

    #### Check parser arguments ####

    # check if number of cores is valid and assign queue
    if args.cores > 32 and not args.amd:
        print(custom_print("Number of cores must be between 1 and 32", "error"))
        sys.exit()
    elif args.cores == 1 and not args.amd:
        queue = "#"
    elif args.cores > 1 and args.cores <= 32 and not args.amd:
        queue = "#$ -pe smp.pe"
    elif args.amd and args.cores > 1 and args.cores <= 168:
        queue = "#$ -pe amd.pe"
    else:
        print(custom_print("The specified configuration is not supported!", "error"))
        sys.exit()

    # check orca and nbo modules
    if args.orca5 and args.cores_per_group != 1:
        sys.exit(custom_print('Orca 5 does not support nprocs_group', 'error'))
    elif args.orca5:
        orca_module = "module load apps/binapps/orca/5.0.4"
    else:
        orca_module = "module load apps/binapps/orca/6.1.0-avx2"

    if args.nbo and not args.orca5:
        nbo_module = """module load apps/binapps/nbo/7.0.8-i8
    export NBOEXE="/opt/apps/apps/binapps/nbo/7.0.8/bin/nbo7.i8.exe"
    export GENEXE="/opt/apps/apps/binapps/nbo/7.0.8/bin/gennbo.i8.exe"
    """
    elif args.nbo and args.orca5:
        nbo_module = """module load apps/binapps/nbo/7.0.8-i4
    export NBOEXE="/opt/apps/apps/binapps/nbo/7.0.8/bin/nbo7.i4.exe"
    export GENEXE="/opt/apps/apps/binapps/nbo/7.0.8/bin/gennbo.i4.exe"
    """
    else:
        nbo_module = ""

    return args, queue, orca_module, nbo_module


def parse_interactively():
    """Function that parses user input interactively"""

    input_file = input("Enter input file name: ")

    # Ask for software version and additional modules
    orca_version = input("Which version of ORCA do you want to use? (enter 5 for ORCA 5.0.4 or 6 ORCA 6.1.0-avx2) ")
    if orca_version == "5":
        orca5 = True
    else:
        orca5 = False

    nbo = input("Do you want to use the NBO module? (Y/n) ").capitalize()
    if nbo == "N":
        nbo = False
    else:
        nbo = True

    # get information on parallelism
    parallel = input("Do you want to run the job in parallel? (Y/n) ").capitalize()
    if parallel == "N":
        cores = 1
        cores_per_group = 1
    else:
        cores = int(input("Enter number of cores: "))
    if not orca5:
        cores_per_group = int(input("Enter number of cores per group. Press enter to skip: "))
        if cores_per_group == "":
            cores_per_group = 1
        elif cores % cores_per_group != 0:
            while cores % cores_per_group != 0:
                print("Number of cores must be divisible by number of cores per group.")
                cores_per_group = int(input("Re-enter number of cores per group: "))
        elif cores_per_group > cores:
            while cores_per_group > cores:
                print("Number of cores per group must be less than or equal to number of cores.")
                cores_per_group = int(input("Re-enter number of cores per group: "))
    else:
        cores_per_group = 1

    # get information on queue
    if parallel != "N":
        amd = input("Do you want to run the job on AMD nodes? (Y/n) ").capitalize()
        if amd != "N":
            amd = True
        else:
            amd = False

    submit = input("Do you want to submit the job? (Y/n) ").capitalize()
    if submit == "N":
        submit = False
    else:
        submit = True

    args = argparse.Namespace(
        input=input_file,
        cores=cores,
        cores_per_group=cores_per_group,
        nbo=nbo,
        amd=amd,
        orca5=orca5,
        interactive=True,
        submit=submit,
    )

    return args


#### Check cores and memory in input file ####


def check_cores_and_mem(input_file: str, c: int, cpg: int, queue) -> None:
    """Function that checks number of cores in input file and adjusts if necessary.

    Args:
        input_file (str): Name of input file
        c (int): number of cores specified by user in cli
        cpg (int): number of cores per group specified by user in cli
    """
    with open(input_file, "r") as f:
        lines = f.read()

    if int(c) % int(cpg) != 0:
        print(custom_print("Number of cores must be divisible by number of cores per group", "error"))
        sys.exit()


    #### Check for maxcore in input file ####

    mem_reg = re.compile(r"\%maxcore\s*(\d+)\n")
    # get line with last keyword line
    try:
        mem = mem_reg.search(lines).group(1)
    except AttributeError:
        mem = 4096
        mem_string = f"%maxcore {mem}\n\n"
        try:
            first_input_line_reg = re.compile(r"!\s*(.*)")
            first_input_line = first_input_line_reg.findall(lines)[-1]
            new_string = first_input_line + "\n" + mem_string
            lines = lines.replace(first_input_line, new_string)
            print(custom_print("%maxcore has been added to your input file.", "info"))
        except IndexError:
            # if no keyword line is found, use first occurence of "%"
            first_method_reg = re.compile(r"\%")
            first_method_block = first_method_reg.findall(lines)[0]
            new_string = mem_string + first_method_block
            lines = re.sub(first_method_block, new_string, lines)
            print(custom_print("%maxcore has been added to your input file.", "info"))

    #### Adjust maxcore if necessary ####


    if queue == "#$ -pe amd.pe" and int(mem) != 8192:
        mem = 8192
        lines = re.sub(mem_reg, f"%maxcore {mem}\n", lines)
        print(custom_print("%maxcore has been set to 8192.", "info"))
    elif queue != "#$ -pe amd.pe" and int(mem) != 4096:
        mem = 4096
        lines = re.sub(mem_reg, f"%maxcore {mem}\n", lines)
        print(custom_print("%maxcore has been set to 4096.", "info"))



    #### Check if pal block is in input file ####


    pal_reg = re.compile(r"\%pal")
    if not pal_reg.search(lines) and args.cores:
        print(
            custom_print(
                "%pal block is not in your input file. This is required for parallel calculations.",
                "warn",
            )
        )
        if args.interactive:
            add_pal = input(
                custom_print(
                    "Do you want to add a %pal block to your input file? (Y/n)",
                    "att",
                )
            ).capitalize()
            if add_pal == "N":
                sys.exit()

        lines = re.sub(mem_reg, f"%maxcore {mem}\n\n%pal\nend\n", lines)

        if not args.orca5:
            lines = re.sub(pal_reg,
                f"%pal\n\tnprocs {c}\n\tnprocs_group {cpg}",
                lines,
            )
            print(custom_print("%pal block has been added to your input file.", "info"))
        else:
            lines = re.sub(r"\%pal", f"%pal\n\tnprocs {c} ", lines)

            print(custom_print("%pal block has been added to your input file.", "info"))


    #### Check if nprocs and nprocs_group are in input file ####


    cores_reg = re.compile(r"\s+nprocs\s*(\d+)\s*")
    try:
        cores = cores_reg.search(lines).group(1)
    except AttributeError:
        print(custom_print("nprocs is not in your input file.", "warn"))
        if args.interactive:
            add_cores = input(
                custom_print(
                    "Do you want to add nprocs to your input file? (Y/n)",
                    "att",
                )
            ).capitalize()
            if add_cores == "N":
                sys.exit()
        lines = re.sub(r"\s*\%pal", f"\n%pal\n\tnprocs {c}\n", lines)
        print(custom_print("nprocs has been added to your input file.", "info"))
        cores = c

    cores_per_group_reg = re.compile(r"nprocs_group\s*(\d+)")
    # check if cores per group is in input file
    if not args.orca5 and cpg != 1:
        try:
            cores_per_group = cores_per_group_reg.search(lines).group(1)
        except AttributeError:
            # add nprocs_group to input file after nprocs
            lines = re.sub(cores_reg, f"\n\tnprocs {c}\n\tnprocs_group {cpg}\n", lines)
            print(custom_print("nprocs_group has been added to your input file.", "info"))
            cores_per_group = cpg
    elif not args.orca5 and cpg == 1:
        try:
            cores_per_group = cores_per_group_reg.search(lines).group(1)
            # remove entire nprocs_group line from input file
            lines = re.sub(r"\s*nprocs_group\s*\d+", "", lines)
            print(custom_print("nprocs_group has been removed from your input file.", "info"))
        except AttributeError:
            cores_per_group = 1
    else:
        try:
            print("nprocs_group is not supported in Orca 5.")
            cores_per_group = cores_per_group_reg.search(lines).group(1)
            # remove nprocs_group from input file
            lines = re.sub(r" nprocs_group\s*\d+\n", "", lines)
            print(custom_print("nprocs_group has been removed from your input file.", "info"))
        except AttributeError:
            cores_per_group = 1


    #### Check if number of cores in input file matches number of cores specified ####


    if int(cores) != c or int(cores_per_group) != cpg and not args.orca5:
        print(custom_print("Your input file does not match number of cores specified.", "warn"))
        # ask user if they want to change number of cores in input file with yes as default
        if args.interactive:
            change_cores = input(
                custom_print(
                    "Do you want to change the number of cores in the input file occording to your cli input? (Y/n)",
                    "att",
                )
            ).capitalize()
            if change_cores == "N":
                sys.exit()

        with open(input_file, "w") as f:
            string1 = re.sub(cores_reg, f"\n\tnprocs {c} ", lines)
            f.write(re.sub(cores_per_group_reg, f"nprocs_group {cpg}\n", string1))
        print(custom_print("Your input file has been modified.", "info"))
    elif int(cores) != c and args.orca5:
        custom_print("Your input file does not match number of cores specified.", "warn")
        if args.interactive:
            change_cores = input(
                print(custom_print(
                    "Do you want to change the number of cores in the input file occording to your cli input? (Y/n)",
                    "att",
                ))
            ).capitalize()
            if change_cores == "N":
                sys.exit()
        with open(input_file, "w") as f:
            string1 = re.sub(cores_reg, f"nprocs {c} ", lines)
            f.write(string1)
        print(custom_print("Your input file has been modified.", "info"))
    else:
        with open(input_file, "w") as f:
            f.write(lines)
    return


### Create runscript ###


def create_runscript(queue, cores, input_file, nbo):
    script = (
        f"""#!/bin/bash --login
#$ -cwd
{queue} {cores}          # Number of cores (2--32). Must match in your ORCA input file!
#$ -N {input_file.split(".")[0]}      # Job name"""
        + """
module purge """
        "\n"
        + orca_module
        + "\n"
        + nbo
        + """

##########################
job=${JOB_NAME}

job=$(echo ${job%%.*})
##########################
export scratchlocation=/scratch
export RSH_COMMAND=ssh
if [ ! -d $scratchlocation/$USER ]

then

  mkdir -p $scratchlocation/$USER

fi
##########################
tdir=$(mktemp -d $scratchlocation/$USER/orcajob_$JOB_ID-XXXX)

# Copy only the necessary stuff in submit directory to scratch directory. Add more here if needed.

cp  $SGE_O_WORKDIR/*.inp $tdir/

cp  $SGE_O_WORKDIR/*.gbw $tdir/

cp  $SGE_O_WORKDIR/*.mp2nat $tdir/

cp  $SGE_O_WORKDIR/*.res* $tdir/

cp  $SGE_O_WORKDIR/*.hess $tdir/

cp  $SGE_O_WORKDIR/*.cmp $tdir/

cp  $SGE_O_WORKDIR/*xyz $tdir/
#########################

# Creating nodefile in scratch

# echo $HOSTNAME > $tdir/$job.nodes

# cd to scratch

cd $tdir

# Copy job and node info to beginning of outputfile

echo "Job execution start: $(date)" >>  $SGE_O_WORKDIR/$job.out

echo "Shared library path: $LD_LIBRARY_PATH" >>  $SGE_O_WORKDIR/$job.out

echo "Slurm Job ID is: ${JOB_ID}" >>  $SGE_O_WORKDIR/$job.out

echo "Slurm Job name is: ${JOB_NAME}" >>  $SGE_O_WORKDIR/$job.out

echo $HOSTNAME >> $SGE_O_WORKDIR/$job.out

#Start ORCA job. ORCA is started using full pathname (necessary for parallel execution). Output file is written directly to submit directory on frontnode.

$(which orca) $job.inp >  $SGE_O_WORKDIR/$job.out

# ORCA has finished here. Now copy important stuff back (xyz files, GBW files etc.). Add more here if needed.

cp $tdir/*.gbw $SGE_O_WORKDIR

cp $tdir/*.engrad $SGE_O_WORKDIR

cp $tdir/*.xyz $SGE_O_WORKDIR

cp $tdir/*.loc $SGE_O_WORKDIR

cp $tdir/*.qro $SGE_O_WORKDIR

cp $tdir/*.uno $SGE_O_WORKDIR

cp $tdir/*.unso $SGE_O_WORKDIR

cp $tdir/*.uco $SGE_O_WORKDIR

cp $tdir/*.hess $SGE_O_WORKDIR

cp $tdir/*.cis $SGE_O_WORKDIR

cp $tdir/*.dat $SGE_O_WORKDIR

cp $tdir/*.mp2nat $SGE_O_WORKDIR

cp $tdir/*.nat $SGE_O_WORKDIR

cp $tdir/*.scfp_fod $SGE_O_WORKDIR

cp $tdir/*.densit* $SGE_O_WORKDIR

cp $tdir/*.nbo $SGE_O_WORKDIR

cp $tdir/FILE.47 $SGE_O_WORKDIR

cp $tdir/*.json* $SGE_O_WORKDIR

cp $tdir/*property.txt $SGE_O_WORKDIR

cp $tdir/*spin* $SGE_O_WORKDIR
"""
    )
    return script


#### Main ####


if __name__ == "__main__":

    args, queue, orca_module, nbo_module = get_parser()

    # check if input file exists
    if not os.path.isfile(args.input):
        print(custom_print("Input file does not exist", "error"))
        sys.exit()
    # if input file exists, create slurm runscript and adjust number of cores
    else:
        # check if number of cores in input file matches number of cores specified
        check_cores_and_mem(args.input, args.cores, args.cores_per_group, queue)
        with open("run.sh", "w") as f:
            f.write(create_runscript(queue, args.cores, args.input, nbo_module))

        if not args.interactive and args.submit:
            os.system("qsub run.sh")
            print(custom_print("Job has been submitted.", "done"))
        elif args.interactive and not args.submit:
            print(custom_print("Runscript has been created. Please check it before submitting the job.", "done"))
            submit = input(custom_print("Do you want to submit the job? (Y/n) now?", "att")).capitalize()
            if submit == "Y":
                os.system("qsub run.sh")
                print(custom_print("Job has been submitted.", "done"))
            else:
                sys.exit()
        elif args.interactive and args.submit:
            os.system("qsub run.sh")
            print(custom_print("Job has been submitted.", "done"))
        else:
            sys.exit()
