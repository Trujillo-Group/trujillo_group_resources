#!/usr/bin/python3
import sys
import os
import argparse

# create parser for parsing input file name
parser = argparse.ArgumentParser(description='Create MEP runscript')
parser.add_argument("-i", "--input", help="Input file name", required=True, type=str)
parser.add_argument("-n", "--nodes", help="Number of nodes. multicore=1, multinode>1, serial=0; default=1", default=1, type=int)
parser.add_argument("-c", "--cores", help="Number of cores. default=1", default=1, type=int)
parser.add_argument("-l", "--queue", help="Queue type: High Memory = mem512 (Max 16 cores, 32GB per), mem256 (Max 16 cores, 16GB per). Short (1h) = short (Max 24 cores, 4GB per)", type=str, choices=['mem512', 'mem256', 'short'])
args = parser.parse_args()

# check if number of nodes is valid
if args.nodes < 2 and (args.cores < 2 or args.cores > 32):
    print("Number of cores must be between 2 and 32 for single node jobs")
    sys.exit()
elif args.cores == 1:
    cores_info = "#"
elif args.cores > 1 and args.cores <= 32:
    cores_info = "#$ -pe smp.pe"

# check if queue type is valid
if args.queue == 'mem512' or args.queue == 'mem256':
    if args.cores > 16:
        print("Number of cores for high memory CPUs must be 16 or less")
        sys.exit()
elif args.queue == 'short':
    if args.cores > 24:
        print("Number of cores for short queue must be 24 or less")
        sys.exit()

# Check if args.input exists
if not os.path.exists(args.input):
    print(f"File {args.input} does not exist")
    sys.exit()
else:
    filename = args.input.split(".")[0]
    print(f"working with {filename}")

def create_runscript(cores_info, cores, filename):
    script = f"""#!/bin/bash --login
#####SGE Parameters
#$ -cwd                 # Run job in directory you submitted from
{cores_info} {cores}         # Number of cores (2--32) on single compute node
#$ -N {filename.split(".")[0]}      # Job name

# Load g16 for the CPU type our job is running on
module load apps/binapps/gaussian/g16c01_em64t_detectcpu

## Set up scratch dir (please do this!)
export GAUSS_SCRDIR=/scratch/$USER/gau_temp_$JOB_ID
mkdir -p $GAUSS_SCRDIR

## Say how much memory to use (5GB per core)
export GAUSS_MDEF=$((NSLOTS*4))GB

## Say how many threads
export OMP_NUM_THREADS=$NSLOTS

## Inform Gaussian how many cores to use
export GAUSS_PDEF=$NSLOTS

formchk {filename}.chk
cubegen 0 density=scf {filename}.fchk {filename.split(".")[0]}_DENS.cube 100 h
cubegen 0 potential=scf {filename}.fchk {filename.split(".")[0]}_MEP.cube 100 h
rm -rf $GAUSS_SCRDIR
"""
    return script


# check if number of cores in input file matches number of cores specified
with open("run.sh", "w") as f:
    f.write(create_runscript(cores_info, args.cores, filename))
if args.queue:
    os.system(f"qsub -l {args.queue} run.sh {filename}")
else:
    os.system(f"qsub run.sh {filename}")