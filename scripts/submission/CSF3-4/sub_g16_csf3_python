#!/bin/python3.6
import os
import sys
import argparse

# create parser for parsing input file name
parser = argparse.ArgumentParser(description='Create Orca slurm runscript')
parser.add_argument("-i", "--input", help="Input file name", required=True, type=str)
parser.add_argument("-n", "--nodes", help="Number of nodes. multicore=1, multinode>1, serial=0; default=1", default=1, type=int)
parser.add_argument("-c", "--cores", help="Number of cores", required=True, type=int)
parser.add_argument("-s", "--short", help="Run the job on the short queue?", required=False, type=bool, default=False)
args = parser.parse_args()

# check if number of nodes is valid

if args.cores > 32 and args.nodes < 2:
    print("Number of cores must be between 2 and 32")
    sys.exit()
elif args.cores == 1:
    queue = "#"
elif args.cores > 1 and args.cores <= 32:
    queue = "#$ -pe smp.pe"

# check if number of cores is the same as in input file
# def check_cores(input_file, cores):
    # with open(input_file, "r") as f:
        # lines = f.readlines()
        # for line in lines:
            # if "nprocs" in line:
                # if int(line.split()[2]) != cores:
                    # print("Number of cores in input file does not match number of cores specified")
#                    ask user if they want to change number of cores in input file
                    # change_cores = input("Do you want to change the number of cores in the input file? (y/n)")
                    # if change_cores == "y":
                        # with open(input_file, "w") as f:
                            # for line in lines:
                                # if "nproc" in line:
                                    # line = f"%pal   nprocs {cores}\n"
                                # f.write(line)
                    # else:
                        # sys.exit()

# create slurm runscript
def create_runscript(queue, cores, input_file):
    script = f"""#!/bin/bash --login

#####SGE Parameters
#$ -cwd                 # Run job in directory you submitted from
{queue} {cores}         # Number of cores (2--32) on single compute node
#$ -N {input_file.split(".")[0]}      # Job name """ + """

# Load g16 for the CPU type our job is running on
module load apps/binapps/gaussian/g16c01_em64t_detectcpu

## Set up scratch dir (please do this!)
export GAUSS_SCRDIR=/scratch/$USER/gau_temp_$JOB_ID
mkdir -p $GAUSS_SCRDIR

## Say how much memory to use (5GB per core)
export GAUSS_MDEF=$((NSLOTS*4))GB

## Say how many threads
export OMP_NUM_THREADS=$NSLOTS

## Inform Gaussian how many cores to use
export GAUSS_PDEF=$NSLOTS
$g16root/g16/g16 < ${JOB_NAME}.com > ${JOB_NAME}.log
rm -rf $GAUSS_SCRDIR"""
    return script

# check if input file exists
if not os.path.isfile(args.input):
    print("Input file does not exist")
    sys.exit()
# if input file exists, create slurm runscript and adjust number of cores
else:
    # check if number of cores in input file matches number of cores specified
    with open("run.sh", "w") as f:
        f.write(create_runscript(queue, args.cores, args.input))
    if args.short:
        os.system(f"qsub -l short run.sh {args.input}")
    else:
        os.system(f"qsub run.sh {args.input}")
    
